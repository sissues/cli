name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install dependencies
        run: pipenv install --deploy --ignore-pipfile

      - name: Build executable
        run: |
          pipenv run pyinstaller app.spec
        env:
          DISPLAY: ":99.0"

      - name: Test executable (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: ./dist/sissues --version

      - name: Test executable (Windows)
        if: matrix.os == 'windows-latest'
        run: .\dist\sissues.exe --version

      - name: Test executable (macOS)
        if: matrix.os == 'macos-latest'
        run: ./dist/sissues --version

      - name: Archive artifacts
        uses: actions/upload-artifact@v2
        with:
          name: executable-${{ matrix.os }}
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download artifacts (Ubuntu)
        uses: actions/download-artifact@v2
        with:
          name: executable-ubuntu-latest
          path: dist/

      - name: Download artifacts (Windows)
        uses: actions/download-artifact@v2
        with:
          name: executable-windows-latest
          path: dist/

      - name: Download artifacts (macOS)
        uses: actions/download-artifact@v2
        with:
          name: executable-macos-latest
          path: dist/

      - name: Create a unique tag
        id: create_tag
        run: echo "RELEASE_TAG=sissues-$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false
          files: dist/*
